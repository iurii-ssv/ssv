// Code generated by MockGen. DO NOT EDIT.
// Source: ./slot_oracle.go
//
// Generated by this command:
//
//	mockgen -package=mocks -destination=./mocks/slot_oracle.go -source=./slot_oracle.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	phase0 "github.com/attestantio/go-eth2-client/spec/phase0"
	gomock "go.uber.org/mock/gomock"
)

// MockSlotOracle is a mock of SlotOracle interface.
type MockSlotOracle struct {
	ctrl     *gomock.Controller
	recorder *MockSlotOracleMockRecorder
}

// MockSlotOracleMockRecorder is the mock recorder for MockSlotOracle.
type MockSlotOracleMockRecorder struct {
	mock *MockSlotOracle
}

// NewMockSlotOracle creates a new mock instance.
func NewMockSlotOracle(ctrl *gomock.Controller) *MockSlotOracle {
	mock := &MockSlotOracle{ctrl: ctrl}
	mock.recorder = &MockSlotOracleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSlotOracle) EXPECT() *MockSlotOracleMockRecorder {
	return m.recorder
}

// Next mocks base method.
func (m *MockSlotOracle) Next() <-chan time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(<-chan time.Time)
	return ret0
}

// Next indicates an expected call of Next.
func (mr *MockSlotOracleMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockSlotOracle)(nil).Next))
}

// Slot mocks base method.
func (m *MockSlotOracle) Slot() phase0.Slot {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Slot")
	ret0, _ := ret[0].(phase0.Slot)
	return ret0
}

// Slot indicates an expected call of Slot.
func (mr *MockSlotOracleMockRecorder) Slot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Slot", reflect.TypeOf((*MockSlotOracle)(nil).Slot))
}
